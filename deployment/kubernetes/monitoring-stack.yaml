apiVersion: apps/v1
kind: Deployment
metadata:
  name: influxdb
  namespace: quantum-hale
  labels:
    app: influxdb
    version: 2.7
spec:
  replicas: 1
  selector:
    matchLabels:
      app: influxdb
  template:
    metadata:
      labels:
        app: influxdb
        version: 2.7
    spec:
      containers:
      - name: influxdb
        image: influxdb:2.7
        ports:
        - containerPort: 8086
          name: http
        env:
        - name: DOCKER_INFLUXDB_INIT_MODE
          value: "setup"
        - name: DOCKER_INFLUXDB_INIT_USERNAME
          value: "admin"
        - name: DOCKER_INFLUXDB_INIT_PASSWORD
          value: "quantum-hale-2024"
        - name: DOCKER_INFLUXDB_INIT_ORG
          value: "quantum-hale"
        - name: DOCKER_INFLUXDB_INIT_BUCKET
          value: "simulation-data"
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1"
        volumeMounts:
        - name: influxdb-storage
          mountPath: /var/lib/influxdb2
      volumes:
      - name: influxdb-storage
        persistentVolumeClaim:
          claimName: influxdb-storage
---
apiVersion: v1
kind: Service
metadata:
  name: influxdb-service
  namespace: quantum-hale
spec:
  type: ClusterIP
  ports:
  - port: 8086
    targetPort: 8086
    name: http
  selector:
    app: influxdb
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: quantum-hale
  labels:
    app: grafana
    version: 10.2.0
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
        version: 10.2.0
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:10.2.0
        ports:
        - containerPort: 3000
          name: http
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          value: "quantum-hale-2024"
        - name: GF_INSTALL_PLUGINS
          value: "grafana-clock-panel,grafana-simple-json-datasource"
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        volumeMounts:
        - name: grafana-storage
          mountPath: /var/lib/grafana
        - name: grafana-dashboards
          mountPath: /etc/grafana/provisioning/dashboards
          readOnly: true
        - name: grafana-datasources
          mountPath: /etc/grafana/provisioning/datasources
          readOnly: true
      volumes:
      - name: grafana-storage
        persistentVolumeClaim:
          claimName: grafana-storage
      - name: grafana-dashboards
        configMap:
          name: grafana-dashboards
      - name: grafana-datasources
        configMap:
          name: grafana-datasources
---
apiVersion: v1
kind: Service
metadata:
  name: grafana-service
  namespace: quantum-hale
spec:
  type: NodePort
  ports:
  - port: 3000
    targetPort: 3000
    nodePort: 30300
    name: http
  selector:
    app: grafana
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: quantum-hale
  labels:
    app: prometheus
    version: v2.47.0
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
        version: v2.47.0
    spec:
      containers:
      - name: prometheus
        image: prom/prometheus:v2.47.0
        ports:
        - containerPort: 9090
          name: http
        args:
        - '--config.file=/etc/prometheus/prometheus.yml'
        - '--storage.tsdb.path=/prometheus'
        - '--web.console.libraries=/etc/prometheus/console_libraries'
        - '--web.console.templates=/etc/prometheus/consoles'
        - '--storage.tsdb.retention.time=200h'
        - '--web.enable-lifecycle'
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus
          readOnly: true
        - name: prometheus-storage
          mountPath: /prometheus
      volumes:
      - name: prometheus-config
        configMap:
          name: prometheus-config
      - name: prometheus-storage
        persistentVolumeClaim:
          claimName: prometheus-storage
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus-service
  namespace: quantum-hale
spec:
  type: NodePort
  ports:
  - port: 9090
    targetPort: 9090
    nodePort: 30990
    name: http
  selector:
    app: prometheus
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: quantum-hale
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
    
    rule_files:
      # - "first_rules.yml"
      # - "second_rules.yml"
    
    scrape_configs:
      - job_name: 'prometheus'
        static_configs:
          - targets: ['localhost:9090']
      
      - job_name: 'quantum-hale-simulation'
        static_configs:
          - targets: ['quantum-hale-simulation-service:9090']
      
      - job_name: 'network-simulator'
        static_configs:
          - targets: ['network-simulator:8081']
      
      - job_name: 'quantum-simulator'
        static_configs:
          - targets: ['quantum-simulator:8082']
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: quantum-hale
data:
  datasources.yml: |
    apiVersion: 1
    
    datasources:
      - name: InfluxDB
        type: influxdb
        access: proxy
        url: http://influxdb-service:8086
        database: simulation-data
        user: admin
        secureJsonData:
          password: quantum-hale-2024
        jsonData:
          version: Flux
          organization: quantum-hale
          defaultBucket: simulation-data
      
      - name: Prometheus
        type: prometheus
        access: proxy
        url: http://prometheus-service:9090
        isDefault: true
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards
  namespace: quantum-hale
data:
  dashboards.yml: |
    apiVersion: 1
    
    providers:
      - name: 'default'
        orgId: 1
        folder: ''
        type: file
        disableDeletion: false
        updateIntervalSeconds: 10
        allowUiUpdates: true
        options:
          path: /etc/grafana/provisioning/dashboards
  
  quantum-hale-overview.json: |
    {
      "dashboard": {
        "id": null,
        "title": "Quantum HALE Overview",
        "tags": ["quantum", "hale", "drone"],
        "timezone": "browser",
        "panels": [
          {
            "id": 1,
            "title": "Quantum Handshake Success Rate",
            "type": "stat",
            "targets": [
              {
                "expr": "quantum_handshake_success_rate",
                "legendFormat": "Success Rate"
              }
            ]
          },
          {
            "id": 2,
            "title": "Network Latency",
            "type": "graph",
            "targets": [
              {
                "expr": "network_latency_ms",
                "legendFormat": "Latency (ms)"
              }
            ]
          },
          {
            "id": 3,
            "title": "Flight Altitude",
            "type": "graph",
            "targets": [
              {
                "expr": "flight_altitude_meters",
                "legendFormat": "Altitude (m)"
              }
            ]
          }
        ]
      }
    }
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: influxdb-storage
  namespace: quantum-hale
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: standard
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-storage
  namespace: quantum-hale
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: standard
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-storage
  namespace: quantum-hale
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: standard 